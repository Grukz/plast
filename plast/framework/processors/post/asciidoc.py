# -*- coding: utf-8 -*-

from framework.api import magic as _magic

from framework.contexts import models as _models
from framework.contexts.logger import Logger as _log

import datetime
import os.path

class Post(_models.Post):
    __description__ = "AsciiDoc postprocessor."
    __author__ = "sk4la"
    __version__ = "0.1"

    def __init__(self, case):
        self.case = case
        self.case.resources["report"] = os.path.join(self.case.resources["case"], "report.adoc")

        try:
            self.out = open(self.case.resources["report"], "a")

        except Exception:
            _log.error("Failed to open the output stream to <{}>".format(self.case.resources["report"]))

    def __del__(self):
        if hasattr(self, "out"):
            self.out.close()

    def _heading(self, content, level=1, suffix="\n\n"):
        self.out.write("{} {}{}".format("=" * level, content.capitalize(), suffix))
    
    def _content(self, content, suffix="\n\n"):
        self.out.write("{}{}".format(content, suffix))

    def _list(self, content, prefix=None, suffix="\n"):
        if prefix:
            self.out.write("{}\n".format(prefix.capitalize()))

        for item in content:
            self.out.write("* {}\n".format(item))

        self.out.write(suffix)

    def _metadata(self, data, suffix="\n"):
        for key, value in data.items():
            self.out.write(":{}: {}\n".format(key, value))

        self.out.write(suffix)

    def _generate_report(self):
        self._heading("Analysis report", suffix="\n")
        self._metadata({
            "author": "Analyst 1",
            "date": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "version": "1.0"
        })
        self._content("This is a sample report generated by the `Post` module `asciidoc`.")
        self._heading("Match(es)", level=2)
        self._content("Let's pretend there are some interesting matches.")
        self._list(["`{}` [`{}`]".format(match["target"]["identifier"], match["match"]["rule"]) for match in _magic._iterate_matches(self.case.resources["matches"])], prefix="These are the matching evidence(s):")
        self._heading("Interpretation", level=2)
        self._content("This report itself provides no tangible proof that the analyzed evidence(s) are compromised in any way. Further manual analysis may be conducted to confirm this hypothesis.", suffix="\n")

    def run(self):
        if not hasattr(self, "out"):
            _log.error("Output stream is unavailable.")
            return

        _log.debug("AsciiDoc report anchored to <{}>.".format(self.case.resources["report"]))
        self._generate_report()
