# -*- coding: utf-8 -*-

from framework.api.external import rendering as _rendering

from framework.contexts import models as _models
from framework.contexts.logger import Logger as _log

import os.path

try:
    import pendulum

except (
    ImportError,
    Exception):

    _log.fault("Import error.", trace=True)

class Post(_models.Post):
    __author__ = "sk4la"
    __description__ = "AsciiDoc postprocessing module."
    __license__ = "MIT <https://raw.githubusercontent.com/sk4la/plast/master/LICENSE>"
    __maintainer__ = ["sk4la"]
    __system__ = ["Darwin", "Linux", "Windows"]
    __version__ = "0.1"

    def __del__(self):
        if hasattr(self, "out"):
            self.out.close()

    def _heading(self, content, level=1, suffix="\n\n"):
        self.out.write("{} {}{}".format("=" * level, content.capitalize(), suffix))
    
    def _content(self, content, suffix="\n\n"):
        self.out.write("{}{}".format(content, suffix))

    def _list(self, content, prefix=None, suffix="\n"):
        if prefix:
            self.out.write("{}\n".format(prefix.capitalize()))

        for item in content:
            self.out.write("* {}\n".format(item))

        self.out.write(suffix)

    def _metadata(self, data, suffix="\n"):
        for key, value in data.items():
            self.out.write(":{}: {}\n".format(key, value))

        self.out.write(suffix)

    def _generate_report(self):
        self._heading("Analysis report", suffix="\n")
        self._metadata({
            "author": "Analyst 1",
            "date": pendulum.now().to_datetime_string(),
            "version": "1.0"
        })
        self._content("This is a sample report generated by the `Post` module `asciidoc`.")
        self._heading("Match(es)", level=2)
        self._content("Let's pretend there are some interesting matches.")
        self._list(["`{}` [`{}`]".format(match["target"]["identifier"], match["match"]["rule"]) for match in _rendering.iterate_matches(self.case.resources["matches"])], prefix="These are the matching evidence(s):")
        self._heading("Interpretation", level=2)
        self._content("This report itself provides no tangible proof that the analyzed evidence(s) are compromised in any way. Further manual analysis may be conducted to confirm this hypothesis.", suffix="\n")

    def run(self, case):
        self.case = case
        self.case.resources["report"] = os.path.join(self.case.resources["case"], "report.adoc")

        try:
            self.out = open(self.case.resources["report"], "a")
            _log.debug("AsciiDoc report anchored to <{}>.".format(self.case.resources["report"]))
            self._generate_report()

        except Exception:
            _log.error("Failed to open the output stream to <{}>".format(self.case.resources["report"]))
